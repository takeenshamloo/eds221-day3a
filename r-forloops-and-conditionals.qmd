---
title: "eds221-day3a"
author: "Takeen Shamloo"
format: html
editor_options: 
  chunk_output_type: console
---

# Interactive Session 3a ----

## Bool operator review ----

```{r}
# Create some objects (let's say these are tree heights)
pinyon_pine <- 14
lodgepole_pine <- 46

# Some logical expressions: 
pinyon_pine == 10 # Exact match?

pinyon_pine < lodgepole_pine # Less than?

lodgepole_pine >= 46 # Greater than or equal?

pinyon_pine != 25 # Not equal to? 
```

## Conditionals ----

```{r}
burrito <- 2.4 # Assign an object value

# Write a short 'if' statement:
if (burrito > 2) {
  print("I love burritos!")
}
```

### String examples ----

```{r}
library(stringr)
my_ships <- c("Millenium Falcon", "X-wing", "Tie-Fighter", "Death Star")
str_detect(my_ships, pattern = "r") # Asks: which elements in the vector contain "r"

phrase <- "I love burritos"
if (str_detect(phrase, "love")) {
  print("Big burrito fan!")
}

```

## if-else statement ----

```{r}
pika <- 89.1

if (pika > 60) {
  print("mega pika")
} else
  print("normal pika")
```

### String example ----

```{r}
food <- "I love enchiladas!"
if (str_detect(food, "burritos")) {
  print("yay burritos!")
} else
  print("what about burritos?")
```

### More if-else statements ----

```{r}
marmot <- 2.8

if (marmot < 0.5) {
  print("a small marmot!")
} else if (marmot >= 0.5 & marmot < 3) {
  print("a medium marmot!")
} else 
  print("a large marmot!")
```

## Switch statements ----

```{r}
species = "mouse"

switch(species,
       "cat" = print("Meow"),
       "dog" = print("Woof!"),
       "mouse" = print("Squeak"))

if (species == 'cat'){
  print("Meow")
} else if (species == 'dog'){
  print("Woof!")
} else {
  print("Squeak")
}
```

## For loops ----

```{r}
dog_names <- c("Teddy", "Khora", "Banjo", "Waffle")

for (pupster in dog_names){
  print(paste("My dog's name is", pupster))
}

# Or similarly (\n is for new line):
for (pupster in dog_names) {
  cat("My dog's name is", pupster, "\n")
}
```

### Another loop example ----

```{r}
mass <- seq(0, 3, by = 0.5)
for (i in mass){
  new_val = i + 2
  print(new_val)
}

# Or using seq_along()
mass <- seq(from = 0, to = 3, by = 0.5)
for (i in seq_along(mass)) {
  new_val = mass[i] + 2
  print(new_val)
}

# Another seq_along() example
tree_height <- c(1,2,6,10)
for (i in seq_along(tree_height)) {
  val = tree_height[i] + tree_height[i + 1]
  print(val)
}
```

## For loops with conditional statements ----

```{r}
# Create the animals vector:
animal <- c("cat", "dog", "dog", "zebra", "dog")

# Create the for loop with conditional statement: 
for (i in seq_along(animal)) {
  if (animal[i] == "dog") {
    print("I love dogs!")
  } else
    print("These are other animals!")
}

# Numeric example ----

# Animal types:
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

# And their respective ages in human years:
age_human <- c(3, 8, 4, 6, 12, 18)

# Convert ages to "animal years" using the following:
# 1 human year = 7 in dog years
# 1 human year = 0.88 in elephant years
# 1 human year = 4.7 in goat years

for (i in seq_along(species)) {
  if (species[i] == "dog") {
    animal_age <- age_human[i] * 7
  } else if (species[i] == "elephant") {
    animal_age <- age_human[i] * 0.88
  } else if (species[i] == "goat") {
    animal_age <- age_human[i] * 4.7
  }
  print(animal_age)
}
```

## Storing for loop outputs 

```{r}
# Create the empty vector animal_ages:
animal_ages <- vector(mode = "numeric", length = length(species))

# Vectors with species and human age: 
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

age_human <- c(3, 8, 4, 6, 12, 18)

# Same loop as above, with additional piece added
# To populate our empty vector

for (i in seq_along(species)) {
  if (species[i] == "dog") {
    animal_age <- age_human[i] * 7
  } else if (species[i] == "elephant") {
    animal_age <- age_human[i] * 0.88
  } else if (species[i] == "goat") {
    animal_age <- age_human[i] * 4.7
  }
  animal_ages[i] <- animal_age # Populate our empty vector
}


# Another example ----
tigers <- c(29, 34, 82)
lions <- c(2, 18, 6)

big_cats <- vector(mode = "numeric", length = length(tigers))

for (i in seq_along(tigers)) {
  total_cats <- tigers[i] + lions[i]
  big_cats[i] <- total_cats
}
```

```{r}
tigers <- c(29, 34, 82)
lions <- c(2, 18, 6)

big_cats <- vector(mode = "numeric", length = length(tigers))

for (i in seq_along(tigers)) {
  total_cats <- tigers[i] + lions[i]
  big_cats[i] <- total_cats
}
```


### For loops across columns of a data frame ----

```{r}
# Create our storage vector
# Note: ncol() returns the number of columns in a data frame
mean_mtcars <- vector(mode = "numeric", length = ncol(mtcars))

# Write the loop
for (i in 1:ncol(mtcars)) {
  mean_val <- mean(mtcars[[i]], na.rm = TRUE)
  mean_mtcars[[i]] <- mean_val
}

# Tada.
```

### A for loop over columns with a condition ----

```{r}
library(palmerpenguins)
for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
    penguin_med <- median(penguins[[i]], na.rm = TRUE)
    print(penguin_med)
  } else {
    print("non-numeric")
  }
}
```

## Functional programming

```{r}
apply(X = mtcars, MARGIN = 2, FUN = mean)

library(tidyverse)
penguins %>% 
  group_by(species) %>% 
  summarize(across(where(is.numeric), mean, na.rm = TRUE))

map(.x = mtcars, .f = mean)

# Or, to return the output in a data frame (instead of a list):
map_df(.x = mtcars, .f = mean)
```









